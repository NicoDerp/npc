#!/usr/bin/python3

# rework branch

import sys, os, re
import subprocess
import time

# Help message
help_message ="""\
Usage: npc <file> [options]

Options:
  -o <file>    Place the output into file
  -p           Pretty-print the AST of the program
  -S           Do not assemble, output is assembly code
  -r           Run the program after a succesful compilation
  --unsafe     Disable type-checking
  --help       Display this information and exit"""


class Arguments:
	def __init__(self):
		self.infn = None
		self.outfn = 'a.out'
		self.pretty = None
		self.help = None
		self.none = None
		self.asm = None
		self.run = None
		self.include_path = './'
		self.unsafe = None
		
class Classified:
	def __init__(self, type):
		self.type = type

class Function(Classified):
	def __init__(self, id, words): # params
		super().__init__("FUNCTION")
		self.id = id
		self.words = words

class Program(Classified):
	def __init__(self, functions):
		super().__init__("PROGRAM")
		self.functions = functions

class Position():
	def __init__(self, tok):
		self.row = tok.row
		self.col = tok.col
		self.filepath = tok.filepath

	def pos(self):
		row = self.row
		row += 1 if row != 0 else 0  # Since emacs is dum dum
		return f"{self.filepath}:{row}:{self.col}"
		
class Const(Classified, Position):
	def __init__(self, value_type, value, tok):
		Classified.__init__(self, "CONST")
		Position.__init__(self, tok)
		self.value_type = value_type
		self.value = value

class Keyword(Classified, Position):
	def __init__(self, op, tok):
		Classified.__init__(self, "KEYWORD")
		Position.__init__(self, tok)
		self.op = op

class Word(Classified, Position):
	def __init__(self, op, tok):
		Classified.__init__(self, "WORD")
		Position.__init__(self, tok)
		self.op = op
		
class Macro(Classified, Position):
	def __init__(self, body, name, tok):
		Classified.__init__(self, "MACRO")
		Position.__init__(self, tok)
		self.body = body
		self.name = name

class MacroCall(Classified, Position):
	def __init__(self, tok):
		Classified.__init__(self, "MACRO_CALL")
		Position.__init__(self, tok)
		self.name = tok.token

class Token(Position):
	def __init__(self, token, row, col, filepath):
		self.token = token
		self.row = row
		self.col = col
		self.filepath = filepath

class Depth():
	def __init__(self, depth):
		self.counter = 0
		self.depth = depth
		self.loop = False

	def label(self):
		return f".L{self.depth}.{self.counter}"

	def nextLabel(self):
		self.counter += 1
		return f".L{self.depth}.{self.counter}"


def program_error(word, err):
	row = word.row
	row += 1 if word.row != 0 else 0  # Since emacs is dum dum
	print(f"{word.pos()}: error: {err}")
	exit(1)

def program_error_(word, err):
	row = word.row
	row += 1 if word.row != 0 else 0  # Since emacs is dum dum
	print(f"{word.pos()}: error: {err}")

	
def program_note(word, note):
	row = word.row
	row += 1 if word.row != 0 else 0  # Since emacs is dum dum
	print(f"{word.pos()}: note: {note}")

def compiler_error(err):
	print(err)
	exit(1)

def lex_file(source_file):
	# Read and get tokens (not including comments)
	with open(source_file, 'r') as infile:
		# Comments!
		lines = [line.split('//', 1)[0] for line in infile.readlines()]
		matches = [((token.start(), token.group()) for token in re.finditer(r"\"(.+?)\"|'(.+?)'|\S+", line)) for line in lines]
		
	for row, i in enumerate(matches):
		for col, tok in i:
			#print(f"Row: {row}, Col: {col}, Token: {tok}")
			yield Token(tok, row, col, source_file)

def parse_string(tok):
	# Only one character so def no string
	if len(tok.token) == 1:
		program_error(tok, f"unclosed string literal `{tok.token}`")

	quote = tok.token[0]
	# Not a quote (shouldn't occur)
	if not quote in '\'"':
		program_error(tok, f"unclosed string literal `{tok.token}`")

	# Two different quotes
	if quote != tok.token[-1]:
		program_error(tok, f"unclosed string literal `{tok.token}`")
	
	# Remove quotes
	s = tok.token[1:-1]

	# For escaped stuff, convert to bytes, then back again
	bytes_string = bytes(s, 'utf-8')
	s = bytes_string.decode('unicode_escape')

	# String
	if quote == '"':
		return Const('STR', s, tok)
	
	# Character
	if len(s) != 1:
		program_error(tok, f"only a single byte is allowed inside a character literal")

	return Const('CHAR', hex(ord(s)), tok)

def parse_token(tok):	
	if tok.token == '+':
		return Word('ADD', tok)

	elif tok.token == '-':
		return Word('SUB', tok)

	elif tok.token == '*':
		return Word('MULT', tok)

	elif tok.token == '/':
		return Word('DIV', tok)

	elif tok.token == 'bor':
		return Word('BINARY_OR', tok)

	elif tok.token == 'band':
		return Word('BINARY_AND', tok)

	elif tok.token == 'shl':
		return Word('SHIFT_LEFT', tok)

	elif tok.token == 'shr':
		return Word('SHIFT_RIGHT', tok)
	
	elif tok.token == 'dump':
		return Word('DUMP', tok)

	elif tok.token == '=':
		return Word('EQU', tok)

	elif tok.token == 'dup':
		return Word('DUP', tok)

	elif tok.token == '2dup':
		return Word('2DUP', tok)
	
	elif tok.token == 'swap':
		return Word('SWAP', tok)

	elif tok.token == 'drop':
		return Word('DROP', tok)

	elif tok.token == 'over':
		return Word('OVER', tok)

	elif tok.token == 'rot':
		return Word('ROT', tok)
	
	elif tok.token == '>':
		return Word('GREATER_THAN', tok)

	elif tok.token == '<':
		return Word('LESS_THAN', tok)

	elif tok.token == 'mem':
		return Word('MEM', tok)

	elif tok.token == ',':
		return Word('LOAD', tok)

	elif tok.token == '.':
		return Word('STORE', tok)

	elif tok.token == ',64':
		return Word('LOAD64', tok)
	
	elif tok.token == '.64':
		return Word('STORE64', tok)

	elif tok.token == 'syscall1':
		return Word('SYSCALL1', tok)
	
	elif tok.token == 'syscall3':
		return Word('SYSCALL3', tok)
	
	elif tok.token == 'fun':
		return Keyword('FUNCTION', tok)

	elif tok.token == 'in':
		return Keyword('IN', tok)
	
	elif tok.token == 'if':
		return Keyword('IF', tok)

	elif tok.token == 'else':
		return Keyword('ELSE', tok)

	elif tok.token == 'end':
		return Keyword('END', tok)
	
	elif tok.token == 'while':
		return Keyword('WHILE', tok)

	elif tok.token == 'do':
		return Keyword('DO', tok)

	elif tok.token == 'include':
		return Keyword('INCLUDE', tok)

	elif tok.token == 'macro':
		return Keyword('MACRO', tok)
	
	else:
		if '\'' in tok.token or '\"' in tok.token:
			return parse_string(tok)
		
		try:
			return Const('INT', int(tok.token), tok)
		except ValueError as err:
			return MacroCall(tok)
			#program_error(tok, err)
			
def parse(tokens):
	for tok in tokens:
		yield parse_token(tok)
	
def parse_args():
	argv = (x for x in sys.argv)
	arguments = Arguments() # Put default values here

	# No arguments so skip and save
	if len(sys.argv) == 1:
		arguments.none = True
		return arguments

	# Since the first one is npc, the second is the file name
	next(argv)

	first = next(argv)
	if first == '--help':
		arguments.help = True
		return arguments

	arguments.infn = first

	while True:
		try:
			arg = next(argv)
		except:
			break

		# print("Arg:", arg)

		if arg == '-p':
			arguments.pretty = True

		elif arg == '-S':
			arguments.asm = True

		elif arg == '-r':
			arguments.run = True

		elif arg == '--unsafe':
			arguments.unsafe = True
			
		elif arg == '-o':
			try:
				arg = next(argv)
			except:
				compiler_error("ERROR: failed to parse args, missing filename after '-o'")

			arguments.outfn = arg

		elif arg == '-I':
			try:
				arg = next(argv)
			except:
				compiler_error("ERROR: failed to parse args, missing path after '-I'")
			
			arguments.include_path = arg
			
		# Unreckgnised argument
		else:
			fail("unreckognized argument '{arg}'")

	return arguments

def pretty_print_word(word):
	if word.type == 'KEYWORD':
		print(f"KEYWORD: `{word.op}`")

	elif word.type == 'WORD':
		print(f"WORD: `{word.op}`")

	elif word.type == 'CONST':
		print(f"CONST: `[{word.value_type}: {word.value}]`")

	else:
		print(f'Unknown {word.type}')
	
def preprocess(words, args, includes=0, expansions=0, macros={}):
	while True:
		try:
			word = next(words)
		except StopIteration:
			break
	
		if word.type == 'KEYWORD' and word.op == 'INCLUDE':
			if includes >= 5:
				program_error(next(words), f"recursive include limit reached: `{includes}`")
	
			inc = next(words)
			if inc.type != 'CONST' or inc.value_type != 'STR':
				program_error(inc, f'expected string to include got \'{inc.type}\'')
			fileName = os.path.join(args.include_path, inc.value)
			if not os.path.exists(fileName):
				program_error(inc, f"couldn't include file `{fileName}` because it does not exist! Double check the name and include paths.")
			
			for w in preprocess((parse_token(x) for x in lex_file(fileName)), args, includes+1, expansions, macros):
				yield w

		elif word.type == 'KEYWORD' and word.op == 'MACRO':
			if expansions >= 5:
				program_error(next(words), f"recursive expansions limit reached: `{expansions}`")

			body = []
			depth = 1
			
			name = next(words)
			if name.type != 'MACRO_CALL':
				program_error(name, f"wrong type for macro name. Expected `MACRO_CALL`, but got `{name.type}")

			if name.name in macros.keys():
				program_error_(word, f"redefinition of already existing macro `{name.name}`")
				program_note(macros[name.name][1], f"the first definition is located here")
				exit(1)

				
			while True:
				try:
					w = next(words)
				except StopIteration:
					program_error(word, '`macro` word is missing `end`')
				
				if w.type == 'KEYWORD' and w.op == 'IF' or w.type == 'KEYWORD' and w.op == 'WHILE':
					depth += 1
					
				if w.type == 'KEYWORD' and w.op == 'END':
					depth -= 1

				if depth == 0:
					break

				body.append(w)

			body = list(preprocess((x for x in body), args, includes, expansions+1, macros))
				
			macros[name.name] = (body, word)
			
		elif word.type == 'MACRO_CALL':
			if word.name not in macros.keys():
				program_error_(word, f"macro `{word.name}` does not exist or is used inside it's definition")
				exit(1)
				
			for w in macros[word.name][0]:
				yield w
				
			# Sneaky hack. Insert macro words first
			#words = (x for x in (macros[word.name].body + list(words)))

			
		else:
			yield word

def not_enough_arguments(word):
	program_error(word, f"not enough arguments for operation `{word.op}`")

def invalid_arguments(word, expected, got):
	program_error(word, f"invalid argument types for {word.op} operation. Expected {expected} but got {got}")

def format_stack(stack):
	for typ, word in stack:
		if word.type == 'CONST':
			yield f'{word.pos()}: `{typ}` from `pushing {word.value}`'
		elif word.type == 'WORD':
			yield f'{word.pos()}: `{typ}` from word `{word.op}`'
		else:
			print('unknown')

def typecheck_program(words):
	stack: List[Tuple[String, Word]] = []
	block_stack: List[Tuple[List[Tuple[String, Word]], Keyword]] = []
	
	while True:
		try:
			word = next(words)
		except StopIteration:
			break
		
		if word.type == 'CONST':
			if word.value_type == 'INT':
				stack.append(('INT', word))

			elif word.value_type == 'STR':
				stack.append(('INT', word))
				stack.append(('PTR', word))

			elif word.value_type == 'CHAR':
				stack.append(('INT', word))

			else:
				program_error(word, f"unknown const type `{word.value_type}`")

		elif word.type == 'WORD':
			if word.op == 'ADD':
				if len(stack) < 2:
					not_enough_arguments(word)

				a_type, a_loc = stack.pop()
				b_type, b_loc = stack.pop()
				
				if a_type == 'INT' and b_type == 'INT':
					stack.append(('INT', word))
				elif a_type == 'PTR' and b_type == 'INT':
					stack.append(('PTR', word))
				elif a_type == 'INT' and b_type == 'PTR':
					stack.append(('PTR', word))
				else:
					invalid_arguments(word, '`INT` or `PTR`', f'`{a_type}` and `{b_type}`')
					
			elif word.op == 'SUB':
				if len(stack) < 2:
					not_enough_arguments(word)

				a_type, a_loc = stack.pop()
				b_type, b_loc = stack.pop()

				if a_type == 'INT' and b_type == 'INT':
					stack.append(('INT', word))
				elif a_type == 'PTR' and b_type == 'INT':
					stack.append(('PTR', word))
				elif a_type == 'INT' and b_type == 'PTR':
					stack.append(('PTR', word))
				else:
					invalid_arguments(word, '`INT` or `PTR`', f'`{a_type}` and `{b_type}`')

			elif word.op == 'MULT':
				if len(stack) < 2:
					not_enough_arguments(word)

				a_type, a_loc = stack.pop()
				b_type, b_loc = stack.pop()

				if a_type != 'INT' or b_type != 'INT':
					invalid_arguments(word, '`INT` and `INT`', f'`{a_type}` and `{b_type}`')
				stack.append(('INT', word))

			elif word.op == 'DIV':
				if len(stack) < 2:
					not_enough_arguments(word)

				a_type, a_loc = stack.pop()
				b_type, b_loc = stack.pop()

				if a_type != 'INT' or b_type != 'INT':
					invalid_arguments(word, '`INT` and `INT`', f'`{a_type}` and `{b_type}`')
				stack.append(('INT', word))


			elif word.op == 'DUP':
				if len(stack) < 1:
					not_enough_arguments(word)

				a = stack.pop()
					
				stack.append(a)
				stack.append(a)

			elif word.op == 'SWAP':
				if len(stack) < 2:
					not_enough_arguments(word)

				a = stack.pop()
				b = stack.pop()

				stack.append(a)
				stack.append(b)

			elif word.op == '2DUP':
				if len(stack) < 2:
					not_enough_arguments(word)

				a = stack.pop()
				b = stack.pop()

				stack.append(b)
				stack.append(a)
				stack.append(b)
				stack.append(a)

			elif word.op == 'BINARY_OR':
				if len(stack) < 2:
					not_enough_arguments(word)

				a_type, a_loc = stack.pop()
				b_type, b_loc = stack.pop()

				if a_type != 'INT' or b_type != 'INT':
					invalid_arguments(word, '`INT` and `INT`', f'`{a_type}` and `{b_type}`')
				
				stack.append(('INT', word))

			elif word.op == 'BINARY_AND':
				if len(stack) < 2:
					not_enough_arguments(word)

				a_type, a_loc = stack.pop()
				b_type, b_loc = stack.pop()

				if a_type != 'INT' or b_type != 'INT':
					invalid_arguments(word, '`INT` and `INT`', '`{a_type}` and `{b_type}`')
									  
				stack.append(('INT', word))

			elif word.op == 'SHIFT_LEFT':
				if len(stack) < 2:
					not_enough_arguments(word)

				a_type, a_loc = stack.pop()
				b_type, b_loc = stack.pop()

				if a_type != 'INT' or b_type != 'INT':
					invalid_arguments(word, '`INT` and `INT`', f'`{a_type}` and `{b_type}`')
				
				stack.append(('INT', word))

			elif word.op == 'SHIFT_RIGHT':
				if len(stack) < 2:
					not_enough_arguments(word)

				a_type, a_loc = stack.pop()
				b_type, b_loc = stack.pop()

				if a_type != 'INT' or b_type != 'INT':
					invalid_arguments(word, '`INT` and `INT`', f'`{a_type}` and `{b_type}`')
				
				stack.append(('INT', word))

			elif word.op == 'LOAD':
				if len(stack) < 1:
					not_enough_arguments(word)

				a_type, a_loc = stack.pop()

				if a_type != 'PTR':
					invalid_arguments(word, '`PTR`', f'`{a_type}`')
				
				stack.append(('INT', word))

			elif word.op == 'STORE':
				if len(stack) < 2:
					not_enough_arguments(word)

				a_type, a_loc = stack.pop()
				b_type, b_loc = stack.pop()

				if a_type != 'INT' or b_type != 'PTR':
					invalid_arguments(word, '`INT` and `PTR`', f'`{a_type}` and `{b_type}`')

			elif word.op == 'DUMP':
				if len(stack) < 1:
					not_enough_arguments(word)

				a_type, a_loc = stack.pop()

				if a_type != 'INT':
					invalid_arguments(word, '`INT`', f'`{a_type}`')

			elif word.op == 'DROP':
				if len(stack) < 1:
					not_enough_arguments(word)

				a = stack.pop()

			elif word.op == 'OVER':
				if len(stack) < 2:
					not_enough_arguments(word)

				a = stack.pop()
				b = stack.pop()

				stack.append(b)
				stack.append(a)
				stack.append(b)

			elif word.op == 'ROT':
				if len(stack) < 3:
					not_enough_arguments(word)

				a = stack.pop()
				b = stack.pop()
				c = stack.pop()

				stack.append(b)
				stack.append(a)
				stack.append(c)

			elif word.op == 'EQU':
				if len(stack) < 2:
					not_enough_arguments(word)

				a_type, a_loc = stack.pop()
				b_type, b_loc = stack.pop()

				# if a_type != b_type:
				
				stack.append(('BOOL', word))

			elif word.op == 'GREATER_THAN':
				if len(stack) < 2:
					not_enough_arguments(word)

				a_type, a_loc = stack.pop()
				b_type, b_loc = stack.pop()

				if a_type != 'INT' or b_type != 'INT':
					invalid_arguments(word, '`INT` and `INT`', f'`{a_type}` and `{b_type}`')
				stack.append(('BOOL', word))

			elif word.op == 'LESS_THAN':
				if len(stack) < 2:
					not_enough_arguments(word)

				a_type, a_loc = stack.pop()
				b_type, b_loc = stack.pop()

				if a_type != 'INT' or b_type != 'INT':
					invalid_arguments(word, '`INT` and `INT`', f'`{a_type}` and `{b_type}`')
				stack.append(('BOOL', word))

			elif word.op == 'SYSCALL1':
				if len(stack) < 2:
					not_enough_arguments(word)

				a_type, a_loc = stack.pop()
				b = stack.pop()

				if a_type != 'INT':
					invalid_arguments(word, '`INT`', f'`{a_type}`')

				# I think they don't push anything
			
			elif word.op == 'SYSCALL3':
				if len(stack) < 4:
					not_enough_arguments(word)

				a_type, a_loc = stack.pop()
				b = stack.pop()
				c = stack.pop()
				d = stack.pop()

				if a_type != 'INT':
					invalid_arguments(word, '`INT`', f'`{a_type}`')
					
			elif word.op == 'MEM':
				stack.append(('PTR', word))
				
		elif word.type == 'KEYWORD':
			if word.op == 'IF':
				if len(stack) < 1:
					not_enough_arguments(word)

				a_type, a_loc = stack.pop()

				if a_type != 'BOOL':
					invalid_arguments(word, '`BOOL`', f'`{a_type}`')

				block_stack.append((stack.copy(), word))

			elif word.op == 'ELSE':
				if len(block_stack) < 1:
					program_error(word, 'else keyword is missing previous if block!')
				
				stack_snapshot, block_type = block_stack.pop()

				if block_type.op != 'IF':
					program_error(word, 'else keyword is missing previous if block!')

				block_stack.append((stack.copy(), word))
				stack = stack_snapshot

			elif word.op == 'WHILE':
				block_stack.append((stack.copy(), word))

			elif word.op == 'DO':
				if len(block_stack) < 1:
					program_error(word, 'do keyword is missing previous while block!')

				expected_stack, block_type = block_stack.pop()

				if block_type.op != 'WHILE':
					program_error(word, 'do keyword is missing previous while block!')

				if len(stack) < 1:
					not_enough_arguments(word)
					
				a_type, a_loc = stack.pop()

				if a_type != 'BOOL':
					invalid_arguments(word, '`BOOL`', f'`{a_type}`')

				expected_types = list(map(lambda x: x[0], expected_stack))
				actual_types = list(map(lambda x: x[0], stack))

				if expected_types != actual_types:
					program_error_(word, 'do block is not allowed to alter the types on the stack')
					program_note(word, f'expected types: {expected_types}')
					program_note(word, f'actual types: {actual_types}')
					exit(1)

				block_stack.append((stack.copy(), word))
				
			elif word.op == 'END':
				expected_stack, block_type = block_stack.pop()
				expected_types = list(map(lambda x: x[0], expected_stack))
				actual_types = list(map(lambda x: x[0], stack))
				
				if block_type.op == 'IF':
					if expected_types != actual_types:
						program_error_(word, 'else-less if block is not allowed to alter types on the stack')
						program_note(word, f'expected types: {expected_types}')
						program_note(word, f'actual types: {actual_types}')
						exit(1)

				elif block_type.op == 'ELSE':
					if expected_types != actual_types:
						program_error_(word, 'both if and else blocks must produce the same types on the stack')
						program_note(word, f'expected types: {expected_types}')
						program_note(word, f'actual types: {actual_types}')
						exit(1)

				elif block_type.op == 'DO':
					if expected_types != actual_types:
						program_error_(word, 'while block is not allowed to alter the types on the stack')
						program_note(word, f'expected types: {expected_types}')
						program_note(word, f'actual types: {actual_types}')
						exit(1)

			elif word.op == 'MACRO':
				program_error(word, f"there shouldn't be a macro keyword here. It's probably a bug in the preprocessing")

		elif word.type == 'MACRO':
			program_error(word, f"there shouldn't be a macro here! It's probably a bug in the preprocessing")

		elif word.type == 'MACRO_CALL':
			program_error(word, f"there shouldn't be a macro call here! It's probably a bug in the preprocessing")
						
		else:
			program_error(word, f'unknown word type `{word.type}`')

		yield word
			
	if len(stack) != 0:
		program_error_(word, "unhandled data on the stack")
		program_note(word, 'Stack at end of code:')
		[print(x) for x in format_stack(stack)]
		exit(1)

def generate_program(words):
	code =  'section .text\n'
	code += 'global _start\n'

	code += f"""\
BITS 64
dump:
    mov     r9, -3689348814741910323
    sub     rsp, 40
    mov     BYTE [rsp+31], 10
    lea     rcx, [rsp+30]
.L1:
    mov     rax, rdi
    lea     r8, [rsp+32]
    mul     r9
    mov     rax, rdi
    sub     r8, rcx
    shr     rdx, 3
    lea     rsi, [rdx+rdx*4]
    add     rsi, rsi
    sub     rax, rsi
    add     eax, 48
    mov     BYTE [rcx], al
    mov     rax, rdi
    mov     rdi, rdx
    mov     rdx, rcx
    sub     rcx, 1
    cmp     rax, 9
    ja      .L1
    lea     rax, [rsp+32]
    mov     edi, 1
    sub     rdx, rax
    xor     eax, eax
    lea     rsi, [rsp+32+rdx]
    mov     rdx, r8
    mov     rax, 1
    syscall
    add     rsp, 40
    ret
"""
	code += '_start:\n'

	# If there is a main function (if there isn't there's a bunch of unused code)
	#if list(filter(lambda x: x.id == 'main', prog.functions)) == []:
	#	compilationError("'main' procedure does not exist")
		
	code += '    call    _main_\n'

	code += '    xor     rdi, rdi\n'
	code += '    mov     rax, 60\n'
	code += '    syscall\n'
	code += '_main_:\n'

	dataLabels = []
	# [{'counter': 5, 'loop': False}, {'counter': 1, 'loop': True}]
	# depth: 2
	depthCounters = []
	labelDepth = 0
	while True:
		try:
			word = next(words)
		except StopIteration:
			break
		
		if word.type == 'CONST':
			if word.value_type == 'INT':
				code +=  '\n    ;; -- CONST INT -- ;;\n'
				code += f'    push    {word.value}\n'
				#code += f'    mov     rax, {word.value}\n'
				#code +=  '    push    rax\n'

			elif word.value_type == 'STR':
				label = 'D' + str(len(dataLabels))
				dataLabels.append({'label': label, 'data': word.value})
				size = len(word.value)
				code +=  '\n    ;; -- CONST STR -- ;;\n'
				code += f'    push    {size}\n'
				code += f'    push    {label}\n'

			elif word.value_type == 'CHAR':
				code +=  '\n    ;; -- CONST CHAR -- ;;\n'
				code += f'    push    {word.value}\n'

			else:
				program_error(word, f"unknown const type '{word.value_type}'")
				
		elif word.type == 'WORD':
			#print(f"Generating WORD operation {word.op}")
			if word.op == 'ADD':
				code += '\n    ;; -- ADD -- ;;\n'
				code += '    pop     rcx\n'
				code += '    pop     rax\n'
				code += '    add     rax, rcx\n'
				code += '    push    rax\n'
				
			elif word.op == 'SUB':
				code += '\n    ;; -- SUB -- ;;\n'
				code += '    pop     rax\n'
				code += '    pop     rcx\n'
				code += '    sub     rcx, rax\n'
				code += '    push    rcx\n'

			elif word.op == 'MULT':
				code += '\n    ;; -- MULT -- ;;\n'
				code += '    pop     rax\n'
				code += '    pop     rcx\n'
				code += '    mul     rcx\n'
				code += '    push    rax\n'

			elif word.op == 'DIV':
				code += '\n    ;; -- DIV -- ;;\n'
				code += '    pop     rcx\n'
				code += '    pop     rax\n'
				code += '    div     rcx\n'
				code += '    push    rax\n'
				
			elif word.op == 'BINARY_OR':
				code += '\n    ;; -- BINARY_OR -- ;;\n'
				code += '    pop     rax\n'
				code += '    pop     rbx\n'
				code += '    or      rbx, rax\n'
				code += '    push    rbx\n'
				
			elif word.op == 'BINARY_AND':
				code += '\n    ;; -- BINARY_AND -- ;;\n'
				code += '    pop     rax\n'
				code += '    pop     rbx\n'
				code += '    and     rbx, rax\n'
				code += '    push    rbx\n'
				
			elif word.op == 'SHIFT_LEFT':
				code += '\n    ;; -- SHIFT_LEFT -- ;;\n'
				code += '    pop     rcx\n'
				code += '    pop     rbx\n'
				code += '    shl     rbx, cl\n'
				code += '    push    rbx\n'
				
			elif word.op == 'SHIFT_RIGHT':
				code += '\n    ;; -- SHIFT_RIGHT -- ;;\n'
				code += '    pop     rcx\n'
				code += '    pop     rbx\n'
				code += '    shr     rbx, cl\n'
				code += '    push    rbx\n'
				
			elif word.op == 'DUMP':
				code += '\n    ;; -- DUMP -- ;;\n'
				code += '    pop     rdi\n'
				code += '    call    dump\n'
				
			elif word.op == 'EQU':
				code += '\n    ;; -- EQU -- ;;\n'
				code += '    xor     rdx, rdx\n'
				code += '    mov     rbx, 1\n'
				code += '    pop     rax\n'
				code += '    pop     rcx\n'
				code += '    cmp     rax, rcx\n'
				code += '    cmove   rdx, rbx\n'
				code += '    push    rdx\n'
				
			elif word.op == 'DUP':
				code += '\n    ;; -- DUP -- ;;\n'
				code += '    pop     rax\n'
				code += '    push    rax\n'
				code += '    push    rax\n'
				
			elif word.op == '2DUP':
				code += '\n    ;; -- 2DUP -- ;;\n'
				code += '    pop     rax\n'
				code += '    pop     rcx\n'
				code += '    push    rcx\n'
				code += '    push    rax\n'
				code += '    push    rcx\n'
				code += '    push    rax\n'
				
			elif word.op == 'SWAP':
				code += '\n    ;; -- SWAP -- ;;\n'
				code += '    pop     rax\n'
				code += '    pop     rcx\n'
				code += '    push    rax\n'
				code += '    push    rcx\n'
				
			elif word.op == 'DROP':
				code += '\n    ;; -- DROP -- ;;\n'
				code += '    pop     rax\n'
				
			elif word.op == 'OVER':
				code += '\n    ;; -- OVER -- ;;\n'
				code += '    pop     rax\n'
				code += '    pop     rcx\n'
				code += '    push    rax\n'
				code += '    push    rcx\n'
				code += '    push    rax\n'

			elif word.op == 'ROT':
				code += '\n    ;; -- ROT -- ;;\n'
				code += '    pop     rax\n'
				code += '    pop     rcx\n'
				code += '    pop     rbx\n'
				code += '    push    rcx\n'
				code += '    push    rax\n'
				code += '    push    rbx\n'
				
			elif word.op == 'GREATER_THAN':
				code += '\n    ;; -- GREATER_THAN -- ;;\n'
				code += '    pop     rax\n'
				code += '    pop     rcx\n'
				code += '    xor     rdx, rdx\n'
				code += '    mov     rbx, 1\n'
				code += '    cmp     rcx, rax\n'
				code += '    cmovg   rdx, rbx\n'
				code += '    push    rdx\n'
				
			elif word.op == 'LESS_THAN':
				code += '\n    ;; -- LESS_THAN -- ;;\n'
				code += '    pop     rax\n'
				code += '    pop     rcx\n'
				code += '    xor     rdx, rdx\n'
				code += '    mov     rbx, 1\n'
				code += '    cmp     rcx, rax\n'
				code += '    cmovl   rdx, rbx\n'
				code += '    push    rdx\n'
				
			elif word.op == 'MEM':
				code += '\n    ;; -- MEM -- ;;\n'
				code += '    push    mem\n'
				
			elif word.op == 'LOAD':
				code += '\n    ;; -- LOAD -- ;;\n'
				code += '    pop     rax\n'
				code += '    xor     rbx, rbx\n'
				code += '    mov     bl, [rax]\n'
				code += '    push    rbx\n'
				
			elif word.op == 'STORE':
				code += '\n    ;; -- STORE -- ;;\n'
				code += '    pop     rbx\n'  # 97
				code += '    pop     rax\n'  # mem
				code += '    mov     [rax], bl\n' # Move lower 8 bits into mem

			elif word.op == 'LOAD64':
				code += '\n    ;; -- LOAD64 -- ;;\n'
				code += '    pop     rax\n'
				code += '    xor     rbx, rbx\n'
				code += '    mov     rbx, [rax]\n'

			elif word.op == 'STORE64':
				code += '\n    ;; -- STORE64 -- ;;\n'
				code += '    pop     rbx\n'
				code += '    pop     rax\n'
				code += '    mov     [rax], rbx\n'
				
			elif word.op == 'SYSCALL1':
				code += '\n    ;; -- SYSCALL1 -- ;;\n'
				code += '    pop rax\n'
				code += '    pop rdi\n'
				code += '    syscall\n'
				
			elif word.op == 'SYSCALL3':
				code += '\n    ;; -- SYSCALL3 -- ;;\n'
				code += '    pop rax\n'
				code += '    pop rdi\n'
				code += '    pop rsi\n'
				code += '    pop rdx\n'
				code += '    syscall\n'
				
			else:
				program_error(word, f"unreckognized word '{word.op}'")
				
		elif word.type == 'KEYWORD':
			#print(f"Generating KEYWORD operation {word.op}")
			if word.op == 'WHILE':
				labelDepth += 1
				while len(depthCounters) <= labelDepth:
					depthCounters.append(Depth(labelDepth))
				depthCounters[labelDepth].loop = True
				while_label = depthCounters[labelDepth].nextLabel()
				code += '\n;; -- WHILE -- ;;\n'
				code += f'{while_label}:\n'
				
			elif word.op == 'DO':
				do_label = depthCounters[labelDepth].nextLabel()
				end_label = depthCounters[labelDepth].nextLabel()
				code += '\n;; -- DO -- ;;\n'
				code += f'{do_label}:\n'
				code +=  '    pop     rax\n'
				code += f'    jz      {end_label}\n'
				
			elif word.op == 'IF':
				labelDepth += 1
				while len(depthCounters) <= labelDepth:
					depthCounters.append(Depth(labelDepth))
				label = depthCounters[labelDepth].nextLabel()
				code +=  '\n    ;; -- IF -- ;;\n'
				code +=  '    pop     rax\n'
				code +=  '    test    rax, rax\n'
				code += f'    jz      {label}\n'
				code +=  '    ;; --- If body goes here --- ;;\n'
				
			elif word.op == 'ELSE':
				else_label = depthCounters[labelDepth].label()
				tmp_label = depthCounters[labelDepth].nextLabel()
				end_label = depthCounters[labelDepth].nextLabel()
				code +=  '\n;; -- ELSE -- ;;\n'
				code += f'{tmp_label}:\n'
				code += f'    jmp {end_label}\n'
				code += f'{else_label}:\n'
				
			elif word.op == 'END':
				label = depthCounters[labelDepth].label()
				code += '\n;; -- END -- ;;\n'
				if depthCounters[labelDepth].loop:
					depthCounters[labelDepth].counter -= 2
					while_label = depthCounters[labelDepth].label()
					depthCounters[labelDepth].counter += 2
					code += f'    jmp     {while_label}\n'
				code += f'{label}: ; end_label\n'
				labelDepth -= 1

			elif word.op == 'INCLUDE':
				program_error(word, f"there shouldn't be an `include` here! It's probably a bug in the preprocessing")

			else:
				program_error(word, f"unreckognized keyword operation '{word.op}'")

		elif word.type == 'MACRO':
			program_error(word, f"there shouldn't be a macro here! It's probably a bug in the preprocessing")

		elif word.type == 'MACRO_CALL':
			program_error(word, f"there shouldn't be a macro call here! It's probably a bug in the preprocessing")
			
		else:
			program_error(word, f"unreckognized word type: '{word.type}'")

	code += '    ret\n'
	
	code += '\nsection .bss\n'
	code += 'mem:\n'
	code += '    resb    4096\n'

	code += '\nsection .text\n'
	
	for data in dataLabels:
		data_bytes = ','.join(map(hex, bytes(data['data'], 'utf-8')))
		code += f'{data["label"]}:\n'
		code += f'    db      {data_bytes}\n'
	
	return code
		
def main():
	arguments = parse_args()

	# Help if --help or no arguments
	if arguments.help or arguments.none:
		print(help_message)
		exit()

	# No input file
	if not arguments.infn:
		fail('no input files supplied')

	# Infile doesn't exist
	if not os.path.isfile(arguments.infn):
		fail(f"{arguments.infn}: No such file or directory")

	# Lexing
	tokens = lex_file(arguments.infn)

	# Parsing
	words = parse(tokens)
	
	# Preprocess (includes and macro expansion)
	words = preprocess(words, arguments)
	
	# Typechecking
	if not arguments.unsafe:
		start_typecheck = time.time()
		words = (w for w in list(typecheck_program(words)))
		end_typecheck = time.time()
		print(f'[INFO] Typechecking took {end_typecheck-start_typecheck:0.5f}s')
	
	start_compile = time.time()
	
	# Compiling
	code = generate_program(words)

	end_compile = time.time()

	print(f'[INFO] Compiling took {end_compile-start_compile:0.5f}s')
	
	tmp_asm = '.tmp_bip_bop.s'
	tmp_o = '.tmp_bip_bop.o'
	
	# Write the generated assembly code to the file
	with open(tmp_asm, 'w') as asmfile:
		asmfile.write(code)
		asmfile.close()

	if arguments.asm:
		os.rename(tmp_asm, arguments.outfn)
		return

	nasm_args = ['nasm', '-f', 'elf64', '-o', tmp_o, tmp_asm]
	ld_args = ['ld', '-o', arguments.outfn, tmp_o]
	
	start = time.time()

	print("[CMD]", ' '.join(nasm_args))
	nasm = subprocess.Popen(nasm_args)
	nasm.communicate()

	if nasm.returncode != 0:
		exit(1)

	print("[CMD]", ' '.join(ld_args))
	ld = subprocess.Popen(ld_args)
	ld.communicate()

	if ld.returncode != 0:
		exit(1)
	
	end = time.time()

	print(f'[INFO] Assembling took {end-start:0.5f}s')

	os.remove(tmp_asm)
	os.remove(tmp_o)

	if arguments.run:
		fn_to_run = './' + arguments.outfn
		print(f"Running '{fn_to_run}'\n")
		# Segmentation fault show show?
		process = subprocess.Popen([fn_to_run])
		process.communicate()

		if process.returncode == 0:
			print("\nProcess exited normally with exit code 0")
			os.remove(arguments.outfn)
		else:
			print(f"\nProcess exited abnormally with exit code {process.returncode}")
		
if __name__ == "__main__":
	main()
	exit(0)
