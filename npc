#!/usr/bin/python3

# rework branch

import sys, os, re
import itertools
import subprocess
import time

# source_re = r"int main\s*\(\s*\)\s*{\s*return\s+(?P<ret>[0-9]+)\s*;\s*}"

# hex: 0[xX][0-9a-fA-F]+

# Bakkes-Naur
# <program> ::= <function>
# <function> ::= "fun" <id> "" <statement> "}"
# <statement> ::= "return" <exp> ";"
# <exp> ::= <logical-and-exp> { ("||" | "|") <logical-and-exp> }
# <logical-and-exp> ::= <equality-exp> { ("&&" | "&" | "^") <equality-exp> }
# <equality-exp> ::= <relational-exp> { ("!=" | "==" ) <relational-exp> }
# <relational-exp> ::= <additive-exp> { ("<" | ">" | "<=" | ">=") <additive-exp> }
# <additive-exp> ::= <term> { ("+" | "-") <term> }
# <term> ::= <factor> { ("*" | "/" | "%") <factor> }
# <factor> ::= "(" <exp> ")" | <unary-op> <factor> | <int>
# <unary-op> ::= "!" | "~" | "-"

# Keywords regex
lexing_keywords = r"([a-zA-Z]+|\d|\+)"

# For function names
function_name_regex = r"[a-zA-Z]\w*"

# Help message
help_message ="""\
Usage: npc file [options]

Options:
  -o <file>    Place the output into file.
  -p           Pretty-print the AST of the program.
  -S           Do not assemble, output is assembly code.
  -h           Display this information and exit."""

base_asm = """\
.text
.globl main
main:
"""
#    movl    ${}, %eax
#    ret


class Arguments:
	def __init__(self):
		self.infn = None
		self.outfn = 'a.out'
		self.pretty = None
		self.help = None
		self.none = None
		self.asm = None

class Classified:
	def __init__(self, type):
		self.type = type

class Function(Classified):
	def __init__(self, id, words): # params
		super().__init__("FUNCTION")
		self.id = id
		self.words = words

class Program(Classified):
	def __init__(self, functions):
		super().__init__("PROGRAM")
		self.functions = functions

class Const(Classified):
	def __init__(self, value_type, value):
		super().__init__("CONST")
		self.value_type = value_type
		self.value = value

class Word(Classified):
	def __init__(self, op):
		super().__init__("WORD")
		self.op = op

class Token():
	def __init__(self, token, row, col, filepath):
		self.token = token
		self.row = row
		self.col = col
		self.filepath = filepath
	
def fail(err):
	print('Error:', err)
	exit(1)
	
def syntaxError(tok, err):
	tok.row += 1 if tok.row != 0 else 0  # Since emacs is dum dum
	print(f"{tok.filepath}:{tok.row}:{tok.col}: {err}")
	exit(1)

def lex(source_file):
	# Read and get matches from regex
	with open(source_file, 'r') as infile:
		#source = infile.read().strip()
		#matches = re.findall(lexing_keywords, source)
		matches = [((token.start(), token.group()) for token in re.finditer(r"\S+", line)) for line in infile.readlines()]
		
	# Filter out '' in the list, could probably be done easier in the regex
	#matches = list(filter(lambda x: x != '', matches))
	
	for row, i in enumerate(matches):
		for col, tok in i:
			print(f"Row: {row}, Col: {col}, Token: {tok}")
			yield Token(tok, row, col, source_file)
			
	# Yield tokens (creates a generator)
	#for match in matches:
	#	yield match.replace(' ', '') # No tokens should have spaces in them

def parseWord(tok):	
	if tok.token == '+':
		return Word('ADD')
	elif tok.token == '-':
		return Word('SUBTRACT')
	elif tok.token == '.':
		return Word('DUMP')
	else:
		try:
			return Const('INT', int(tok.token))
		except ValueError as err:
			syntaxError(tok, err)

def parseFunction(tokens):
	tok = next(tokens)
	if tok.token != 'fun':
		syntaxError(tok, f"got token '{tok}', but expected 'fun'")

	id = next(tokens).token

	# Invalid function name
	#if not re.match(function_name_regex, id):
	#	fail()

	tok = next(tokens)
	if tok.token != 'in':
		syntaxError(tok, f"got token '{tok}', but expected 'in'")

	# Support for multiple statements
	# statement = None
	# while True:
	#   statement = ...
	#   if nextToken==None: EOF, fail()
	#   if nextToken=='}': break
	words = []

	while True:
		tok = next(tokens)
		if tok.token == 'end': break
		word = parseWord(tok)
		words.append(word)

	function = Function(id, words)

	return function

def parse(tokens):
	function = parseFunction(tokens)
	program = Program([function])
	return program


def pretty_print(obj, n=0):
	space = '    '
	if obj.type == "PROGRAM":
		print("PROGRAM:")
		for func in obj.functions:
			pretty_print(func, n+1)

	elif obj.type == "FUNCTION":
		print(space*(n+0) + f"FUN {obj.id}:")
		print(space*(n+1) +  "params: ()") # None yet
		print(space*(n+1) +  "body:")
		pretty_print(obj.body, n+1)

	elif obj.type == "BODY":
		for statement in obj.statements:
			if statement.type == "RETURN":
				pretty_print(statement.exp, n+1)
			else:
				print(space*(n+2) + f"{statement.type} ???")

	elif obj.type == "UNOP":
		print(space*(n+0) + f"UNOP<{obj.op.operator}, {obj.value.type}>")
		pretty_print(obj.value, n+1)

	elif obj.type == "BINOP":
		print(space*(n+0) + f"BINOP<{obj.left.type}, {obj.op.operator}, {obj.right.type}>")
		pretty_print(obj.left, n+1)
		pretty_print(obj.op, n+1)
		pretty_print(obj.right, n+1)

	elif obj.type == "CONST":
		print(space*n + f"CONST<{obj.value_type}<{obj.value}>>")

def parse_args():
	argv = (x for x in sys.argv)
	arguments = Arguments() # Put default values here

	# No arguments so skip and save
	if len(sys.argv) == 1:
		arguments.none = True
		return arguments

	# Since the first one is npc, the second is the file name
	next(argv)

	first = next(argv)
	if first == '--help':
		arguments.help = True
		return arguments

	arguments.infn = first

	while True:
		try:
			arg = next(argv)
		except:
			break

		# print("Arg:", arg)

		if arg == '-p':
			arguments.pretty = True

		elif arg == '-S':
			arguments.asm = True

		elif arg == '-o':
			try:
				arg = next(argv)
			except:
				fail("missing filename after '-o'")

			arguments.outfn = arg

		# Unreckgnised argument
		else:
			fail("unreckognized argument '{arg}'")

	return arguments

labelCounter = 0

def generateLabel():
	global labelCounter
	labelCounter += 1
	return ".L" + str(labelCounter)

def generateWord(word):	
	code = ''
	if word.type == 'CONST':
		code += f'    mov     rax, {word.value}\n'
		code +=  '    push    rax\n'
	
	elif word.type == 'BINARY_OPERATOR':
		if word.op == 'ADD':
			code += '    pop     rcx\n'
			code += '    pop     rax\n'
			code += '    add     rax, rcx\n'

		elif word.op == 'DUMP':
			code += '    pop     rdi'
			code += '    call    dump\n'
			
	return code

def generateFunction(func):
	code = f'{func.id}:\n'
	for word in func.words:
		code += generateWord(word)
	code += '    ret\n'
	return code

def generateProgram(prog):
	code =  'section .text\n'
	code += 'global _start\n'
	code += '_start:\n'
	code += '    call    main\n'
	code += '    mov     rdi, rax\n'
	code += '    mov     rax, 0x3c\n'
	code += '    syscall\n'
	for func in prog.functions:
		code += generateFunction(func)
	return code
		
def main():
	arguments = parse_args()

	# Help if --help or no arguments
	if arguments.help or arguments.none:
		print(help_message)
		exit()

	# No input file
	if not arguments.infn:
		fail('no input files supplied')

	# Infile doesn't exist
	if not os.path.isfile(arguments.infn):
		fail(f"{arguments.infn}: No such file or directory")

	start = time.time()
	
	tokens = lex(arguments.infn)

	prog = parse(tokens)

	# Pretty printing
	if arguments.pretty:
		pretty_print(prog)

	code = generateProgram(prog)

	# Type checking ...

	end = time.time()

	print(f'[INFO] Compiling took {end-start:0.5f}s')
	
	tmp_asm = '.tmp_bip_bop.s'
	tmp_o = '.tmp_bip_bop.o'
	
	# Write the generated assembly code to the file
	with open(tmp_asm, 'w') as asmfile:
		asmfile.write(code)
		asmfile.close()

	if arguments.asm:
		os.rename(tmp_asm, arguments.outfn)
	else:
		start = time.time()
		subprocess.Popen(['nasm', '-f', 'elf64', '-o', tmp_o, tmp_asm]).communicate()
		subprocess.Popen(['ld', '-o', arguments.outfn, tmp_o]).communicate()
		end = time.time()

		print(f'[INFO] Assembling took {end-start:0.5f}s')

		os.remove(tmp_asm)
		os.remove(tmp_o)
		
if __name__ == "__main__":
	main()
