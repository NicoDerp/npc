#!/usr/bin/python3

# rework branch

import sys, os, re
import itertools
import subprocess
import time

# Help message
help_message ="""\
Usage: npc file [options]

Options:
  -o <file>    Place the output into file
  -p           Pretty-print the AST of the program
  -S           Do not assemble, output is assembly code
  -r           Run the program after a succesful compilation
  -h           Display this information and exit"""


class Arguments:
	def __init__(self):
		self.infn = None
		self.outfn = 'a.out'
		self.pretty = None
		self.help = None
		self.none = None
		self.asm = None
		self.run = None
		
class Classified:
	def __init__(self, type):
		self.type = type

class Function(Classified):
	def __init__(self, id, words): # params
		super().__init__("FUNCTION")
		self.id = id
		self.words = words

class Program(Classified):
	def __init__(self, functions):
		super().__init__("PROGRAM")
		self.functions = functions

class Const(Classified):
	def __init__(self, value_type, value):
		super().__init__("CONST")
		self.value_type = value_type
		self.value = value

class Word(Classified):
	def __init__(self, op):
		super().__init__("WORD")
		self.op = op

class Token():
	def __init__(self, token, row, col, filepath):
		self.token = token
		self.row = row
		self.col = col
		self.filepath = filepath
	
def fail(err):
	print('Error:', err)
	exit(1)
	
def syntaxError(tok, err):
	tok.row += 1 if tok.row != 0 else 0  # Since emacs is dum dum
	print(f"{tok.filepath}:{tok.row}:{tok.col}: {err}")
	exit(1)

def lex(source_file):
	# Read and get tokens (not including comments)
	with open(source_file, 'r') as infile:
		# Comments!
		lines = [line.split('//', 1)[0] for line in infile.readlines()]
		matches = [((token.start(), token.group()) for token in re.finditer(r"[\"'](.+?)[\"']|\S+", line)) for line in lines]
		
	for row, i in enumerate(matches):
		for col, tok in i:
			#print(f"Row: {row}, Col: {col}, Token: {tok}")
			yield Token(tok, row, col, source_file)

def parseString(tok):
	err = f"end of line while scanning string literal: {tok.token}"

	# Only one character so def no string
	if len(tok.token) == 1:
		syntaxError(tok, err)

	quote = tok.token[0]
	# Not a quote (shouldn't occur)
	if not quote in '\'"':
		syntaxError(tok, err)

	# Two different quotes
	if quote != tok.token[-1]:
		syntaxError(tok, err)
	
	s = tok.token[1:-1]
	return s
			
def parseWord(tok):	
	if tok.token == '+':
		return Word('ADD')

	elif tok.token == '-':
		return Word('SUB')

	elif tok.token == 'bor':
		return Word('BINARY_OR')

	elif tok.token == 'band':
		return Word('BINARY_AND')

	elif tok.token == 'shl':
		return Word('SHIFT_LEFT')

	elif tok.token == 'shr':
		return Word('SHIFT_RIGHT')
	
	elif tok.token == 'dump':
		return Word('DUMP')

	elif tok.token == '=':
		return Word('EQU')

	elif tok.token == 'if':
		return Word('IF')

	elif tok.token == 'else':
		return Word('ELSE')

	elif tok.token == 'end':
		return Word('END')

	elif tok.token == 'dup':
		return Word('DUP')

	elif tok.token == '2dup':
		return Word('2DUP')
	
	elif tok.token == 'swap':
		return Word('SWAP')

	elif tok.token == 'drop':
		return Word('DROP')

	elif tok.token == 'over':
		return Word('OVER')
	
	elif tok.token == '>':
		return Word('GREATER_THAN')

	elif tok.token == '<':
		return Word('LESS_THAN')

	elif tok.token == 'while':
		return Word('WHILE')

	elif tok.token == 'do':
		return Word('DO')

	elif tok.token == 'mem':
		return Word('MEM')

	elif tok.token == ',':
		return Word('LOAD')

	elif tok.token == '.':
		return Word('STORE')

	elif tok.token == 'syscall1':
		return Word('SYSCALL1')
	
	elif tok.token == 'syscall3':
		return Word('SYSCALL3')
	
	else:
		if '\'' in tok.token or '\"' in tok.token:
			return Const('STRING', parseString(tok))
		try:
			return Const('INT', int(tok.token))
		except ValueError as err:
			syntaxError(tok, err)
			
def parseFunction(tokens):
	tok = next(tokens)
	if tok.token != 'fun':
		syntaxError(tok, f"got token '{tok}', but expected 'fun'")

	id = next(tokens).token

	# Invalid function name
	#if not re.match(function_name_regex, id):
	#	fail()

	tok = next(tokens)
	if tok.token != 'in':
		syntaxError(tok, f"got token '{tok}', but expected 'in'")

	# Support for multiple statements
	# statement = None
	# while True:
	#   statement = ...
	#   if nextToken==None: EOF, fail()
	#   if nextToken=='}': break
	words = []

	depth = 1
	while True:
		tok = next(tokens)

		if tok.token == 'if' or tok.token == 'while':
			depth += 1
		elif tok.token == 'end':
			depth -= 1
		if depth == 0:
			break
		
		word = parseWord(tok)
		words.append(word)

	function = Function(id, words)

	return function

def parse(tokens):
	function = parseFunction(tokens)
	program = Program([function])
	return program


def pretty_print(obj, n=0):
	space = '    '
	print('Wiiu')
	
def parse_args():
	argv = (x for x in sys.argv)
	arguments = Arguments() # Put default values here

	# No arguments so skip and save
	if len(sys.argv) == 1:
		arguments.none = True
		return arguments

	# Since the first one is npc, the second is the file name
	next(argv)

	first = next(argv)
	if first == '--help':
		arguments.help = True
		return arguments

	arguments.infn = first

	while True:
		try:
			arg = next(argv)
		except:
			break

		# print("Arg:", arg)

		if arg == '-p':
			arguments.pretty = True

		elif arg == '-S':
			arguments.asm = True

		elif arg == '-r':
			arguments.run = True
			
		elif arg == '-o':
			try:
				arg = next(argv)
			except:
				fail("missing filename after '-o'")

			arguments.outfn = arg

		# Unreckgnised argument
		else:
			fail("unreckognized argument '{arg}'")

	return arguments

labelCounters = []
labelDepth = 0
labelInfo = []

def generateLabel():
	global labelCounters, labelDepth
	if len(labelCounters) >= labelDepth:
		labelCounters.append(0)
	labelCounters[labelDepth] += 1
	return f".L{str(labelDepth)}.{str(labelCounters[labelDepth])}"

def currentLabel():
	global labelCounters, labelDepth
	return f".L{str(labelDepth)}.{str(labelCounters[labelDepth])}"

def previousLabel():
	global labelCounters
	labelCounters[labelDepth] -= 1
	return f".L{str(labelDepth)}.{str(labelCounters[labelDepth])}"

def increaseDepth():
	global labelDepth
	labelDepth += 1

def decreaseDepth():
	global labelDepth
	labelDepth -= 1

def getLabelInfo():
	global labelInfo, labelDepth
	while len(labelInfo) <= labelDepth:
		labelInfo.append({'loop': False})
	return labelInfo[labelDepth]


dataLabels = []

def getDataLabels():
	global dataLabels
	return dataLabels

def generateDataLabel(data):
	global dataLabels
	label = 'D' + str(len(dataLabels))
	dataLabels.append({'label': label, 'data': data})
	return label

def generateWord(word):	
	code = ''
	if word.type == 'CONST':
		if word.value_type == 'INT':
			code +=  '\n    ;; -- CONST INT -- ;;\n'
			code += f'    push    {word.value}\n'
			#code += f'    mov     rax, {word.value}\n'
			#code +=  '    push    rax\n'

		if word.value_type == 'STRING':
			label = generateDataLabel(word.value)
			size = len(word.value)
			code +=  '\n    ;; -- CONST STRING -- ;;\n'
			code += f'    push    {size}\n'
			code += f'    push    {label}\n'
			
	elif word.type == 'WORD':
		#print(f"Generating word '{word.op}'")
		if word.op == 'ADD':
			code += '\n    ;; -- ADD -- ;;\n'
			code += '    pop     rcx\n'
			code += '    pop     rax\n'
			code += '    add     rax, rcx\n'
			code += '    push    rax\n'
			
		elif word.op == 'SUB':
			code += '\n    ;; -- SUB -- ;;\n'
			code += '    pop     rax\n'
			code += '    pop     rcx\n'
			code += '    sub     rcx, rax\n'
			code += '    push    rcx\n'

		elif word.op == 'BINARY_OR':
			code += '\n    ;; -- BINARY_OR -- ;;\n'
			code += '    pop     rax\n'
			code += '    pop     rbx\n'
			code += '    or      rbx, rax\n'
			code += '    push    rbx\n'


		elif word.op == 'BINARY_AND':
			code += '\n    ;; -- BINARY_AND -- ;;\n'
			code += '    pop     rax\n'
			code += '    pop     rbx\n'
			code += '    and     rbx, rax\n'
			code += '    push    rbx\n'


		elif word.op == 'SHIFT_LEFT':
			code += '\n    ;; -- SHIFT_LEFT -- ;;\n'
			code += '    pop     rcx\n'
			code += '    pop     rbx\n'
			code += '    shl     rbx, cl\n'
			code += '    push    rbx\n'

		elif word.op == 'SHIFT_RIGHT':
			code += '\n    ;; -- SHIFT_RIGHT -- ;;\n'
			code += '    pop     rcx\n'
			code += '    pop     rbx\n'
			code += '    shr     rbx, cl\n'
			code += '    push    rbx\n'
		
		elif word.op == 'DUMP':
			code += '\n    ;; -- DUMP -- ;;\n'
			code += '    pop     rdi\n'
			code += '    call    dump\n'

		elif word.op == 'EQU':
			code += '\n    ;; -- EQU -- ;;\n'
			code += '    xor     rdx, rdx\n'
			code += '    mov     rbx, 1\n'
			code += '    pop     rax\n'
			code += '    pop     rcx\n'
			code += '    cmp     rax, rcx\n'
			code += '    cmove   rdx, rbx\n'
			code += '    push    rdx\n'

		elif word.op == 'IF':
			increaseDepth()
			label = generateLabel()
			code +=  '\n    ;; -- IF -- ;;\n'
			code +=  '    pop     rax\n'
			code +=  '    test    rax, rax\n'
			code += f'    jz      {label}\n'
			code +=  '    ;; --- If body goes here --- ;;\n'

		elif word.op == 'ELSE':
			else_label = currentLabel()
			tmp_label = generateLabel()
			end_label = generateLabel()
			code +=  '\n;; -- ELSE -- ;;\n'
			code += f'{tmp_label}:\n'
			code += f'    jmp {end_label}\n'
			code += f'{else_label}:\n'
			
		elif word.op == 'END':
			label = currentLabel()
			code += '\n;; -- END -- ;;\n'
			if getLabelInfo()['loop']:
				previousLabel()
				while_label = previousLabel()
				generateLabel()
				generateLabel()
				code += f'    jmp     {while_label}\n'
			code += f'{label}: ; end_label\n'
			decreaseDepth()

		elif word.op == 'DUP':
			code += '\n    ;; -- DUP -- ;;\n'
			code += '    pop     rax\n'
			code += '    push    rax\n'
			code += '    push    rax\n'

		elif word.op == '2DUP':
			code += '\n    ;; -- 2DUP -- ;;\n'
			code += '    pop     rax\n'
			code += '    pop     rcx\n'
			code += '    push    rcx\n'
			code += '    push    rax\n'
			code += '    push    rcx\n'
			code += '    push    rax\n'
			
		elif word.op == 'SWAP':
			code += '\n    ;; -- SWAP -- ;;\n'
			code += '    pop     rax\n'
			code += '    pop     rcx\n'
			code += '    push    rax\n'
			code += '    push    rcx\n'

		elif word.op == 'DROP':
			code += '\n    ;; -- DROP -- ;;\n'
			code += '    pop     rax\n'

		elif word.op == 'OVER':
			code += '\n    ;; -- OVER -- ;;\n'
			code += '    pop     rax\n'
			code += '    pop     rcx\n'
			code += '    push    rax\n'
			code += '    push    rcx\n'
			code += '    push    rax\n'
			
		elif word.op == 'GREATER_THAN':
			code += '\n    ;; -- GREATER_THAN -- ;;\n'
			code += '    pop     rax\n'
			code += '    pop     rcx\n'
			code += '    xor     rdx, rdx\n'
			code += '    mov     rbx, 1\n'
			code += '    cmp     rcx, rax\n'
			code += '    cmovg   rdx, rbx\n'
			code += '    push    rdx\n'

		elif word.op == 'LESS_THAN':
			code += '\n    ;; -- LESS_THAN -- ;;\n'
			code += '    pop     rax\n'
			code += '    pop     rcx\n'
			code += '    xor     rdx, rdx\n'
			code += '    mov     rbx, 1\n'
			code += '    cmp     rcx, rax\n'
			code += '    cmovl   rdx, rbx\n'
			code += '    push    rdx\n'

		elif word.op == 'WHILE':
			increaseDepth()
			getLabelInfo()['loop'] = True
			while_label = generateLabel()
			code += '\n;; -- WHILE -- ;;\n'
			code += f'{while_label}:  ; while_label\n'
			
		elif word.op == 'DO':
			do_label = generateLabel()
			end_label = generateLabel()
			code += '\n;; -- DO -- ;;\n'
			code += f'{do_label}:  ; do_label\n'
			code +=  '    pop     rax\n'
			code +=  '    test    rax, rax\n'
			code += f'    jz      {end_label}\n'

		elif word.op == 'MEM':
			code += '\n    ;; -- MEM -- ;;\n'
			code += '    push    mem\n'

		elif word.op == 'LOAD':
			code += '\n    ;; -- LOAD -- ;;\n'
			code += '    pop     rax\n'
			code += '    xor     rbx, rbx\n'
			code += '    mov     bl, [rax]\n'
			code += '    push    rbx\n'

		elif word.op == 'STORE':
			code += '\n    ;; -- STORE -- ;;\n'
			code += '    pop     rbx\n'  # 97
			code += '    pop     rax\n'  # mem
			code += '    mov     [rax], bl\n' # Move lower 8 bits into mem

		elif word.op == 'SYSCALL1':
			code += '\n    ;; -- SYSCALL1 -- ;;\n'
			code += '    pop rax\n'
			code += '    pop rdi\n'
			code += '    syscall\n'
			
		elif word.op == 'SYSCALL3':
			code += '\n    ;; -- SYSCALL3 -- ;;\n'
			code += '    pop rax\n'
			code += '    pop rdi\n'
			code += '    pop rsi\n'
			code += '    pop rdx\n'
			code += '    syscall\n'
			
		else:
			compilationError(tok, f"unreckognized word '{word}'")

	else:
		compilationError(tok, f"unreckognized word '{word}'")
		
	return code

def generateFunction(func):
	code = f'{func.id}:\n'
	for word in func.words:
		code += generateWord(word)
	code += '    ret\n'
	return code

def generateProgram(prog):
	code =  'section .text\n'
	code += 'global _start\n'
	label = generateLabel()

	code += f"""\
BITS 64
dump:
    mov     r9, -3689348814741910323
    sub     rsp, 40
    mov     BYTE [rsp+31], 10
    lea     rcx, [rsp+30]
{label}:
    mov     rax, rdi
    lea     r8, [rsp+32]
    mul     r9
    mov     rax, rdi
    sub     r8, rcx
    shr     rdx, 3
    lea     rsi, [rdx+rdx*4]
    add     rsi, rsi
    sub     rax, rsi
    add     eax, 48
    mov     BYTE [rcx], al
    mov     rax, rdi
    mov     rdi, rdx
    mov     rdx, rcx
    sub     rcx, 1
    cmp     rax, 9
    ja      {label}
    lea     rax, [rsp+32]
    mov     edi, 1
    sub     rdx, rax
    xor     eax, eax
    lea     rsi, [rsp+32+rdx]
    mov     rdx, r8
    mov     rax, 1
    syscall
    add     rsp, 40
    ret
"""
	code += '_start:\n'
	code += '    call    main\n'
	#code += '    mov     rdi, rax\n'
	code += '    xor     rdi, rdi\n'
	code += '    mov     rax, 60\n'
	code += '    syscall\n'
	for func in prog.functions:
		code += generateFunction(func)
	
	code += '\nsection .bss\n'
	code += 'mem:\n'
	code += '    resb    640000\n'

	code += '\nsection .text\n'
	
	for data in getDataLabels():
		code += f'{data["label"]}:\n'
		code += f'    db      "{data["data"]}"\n'
	
	return code
		
def main():
	arguments = parse_args()

	# Help if --help or no arguments
	if arguments.help or arguments.none:
		print(help_message)
		exit()

	# No input file
	if not arguments.infn:
		fail('no input files supplied')

	# Infile doesn't exist
	if not os.path.isfile(arguments.infn):
		fail(f"{arguments.infn}: No such file or directory")

	start = time.time()
	
	tokens = lex(arguments.infn)

	# Type checking ...	

	prog = parse(tokens)

	# Pretty printing
	if arguments.pretty:
		pretty_print(prog)

	code = generateProgram(prog)

	end = time.time()

	print(f'[INFO] Compiling took {end-start:0.5f}s')
	
	tmp_asm = '.tmp_bip_bop.s'
	tmp_o = '.tmp_bip_bop.o'
	
	# Write the generated assembly code to the file
	with open(tmp_asm, 'w') as asmfile:
		asmfile.write(code)
		asmfile.close()

	if arguments.asm:
		os.rename(tmp_asm, arguments.outfn)
		return

	nasm_args = ['nasm', '-f', 'elf64', '-o', tmp_o, tmp_asm]
	ld_args = ['ld', '-o', arguments.outfn, tmp_o]
	
	start = time.time()

	print("[CMD]", ' '.join(nasm_args))
	nasm = subprocess.Popen(nasm_args)
	nasm.communicate()

	if nasm.returncode != 0:
		exit(1)

	print("[CMD]", ' '.join(ld_args))
	ld = subprocess.Popen(ld_args)
	ld.communicate()

	if ld.returncode != 0:
		exit(1)
	
	end = time.time()

	print(f'[INFO] Assembling took {end-start:0.5f}s')

	os.remove(tmp_asm)
	os.remove(tmp_o)

	if arguments.run:
		fn_to_run = './' + arguments.outfn
		print(f"Running '{fn_to_run}'\n")
		# Segmentation fault show show?
		process = subprocess.Popen([fn_to_run])
		process.communicate()

		if process.returncode == 0:
			print("\nProcess exited normally with exit code 0")
		else:
			print(f"\nProcess exited abnormally with exit code {process.returncode}")
		os.remove(arguments.outfn)
		
if __name__ == "__main__":
	main()
	exit(0)
